global:
  # This is used to create a canary deployment
  # It will create a second frontend deployment with different labels
  # Istio Gateway will balance traffic between the two versions
  canary:
    enabled: false
    tag: "2.0.2"
  # This project is configured to use TLS through lets encrypt
  # DNS validation is done through CloudFlare DNS01 challenge with the token below
  # This token is for the domain specified below and is disabled once this repository is public
  # To use it enter a valid domain, set the NS to CloudFlare and create a token according to the cert-manager documentation
  tls:
    enabled: false
    email: EMAIL_ADDRESS@DOMAIN.com
    certName: ingress-cert
    namespace: istio-system
    cloudFlareAPIToken: ENTER_CLOUDFLARE_API_TOKEN
    dnsNames:
      - DNS_NAMES

# Sets the Values for the Postgres chart
postgresql:
  postgresqlUsername: software-containerization
  postgresqlPassword: super-secret-password
  postgresqlDatabase: sc-users

# Sets the values for the REST API chart
api:
  image:
    tag: "1.0.1"

  # Specifies the default amount of replicas of this pod to run
  replicaCount: 1

  # Sets the environment variables for the REST API to access the Postgres DB
  # Should match those set above for the actual Postgres chart
  dbConfig:
    DB_USER: software-containerization
    DB_PASSWORD: super-secret-password
    DB_NAME: sc-users
  # Enables HPA based on CPU usage
  # The (arbitrary) deployment requirements are set in the chart to enable HPA
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 4
    targetCPUUtilizationPercentage: 50

# Sets the values for the Frontend chart
frontend:
  image:
    tag: "1.2.0"

  # Specifies the default amount of replicas of this pod to run
  replicaCount: 2

  # Enables HPA based on CPU usage
  # The (arbitrary) deployment requirements are set in the chart to enable HPA
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 4
    targetCPUUtilizationPercentage: 50
